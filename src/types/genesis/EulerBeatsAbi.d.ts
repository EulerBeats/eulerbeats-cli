/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers'
import {
    Contract,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface EulerBeatsAbiInterface extends ethers.utils.Interface {
    functions: {
        'addScript(string)': FunctionFragment
        'balanceOf(address,uint256)': FunctionFragment
        'balanceOfBatch(address[],uint256[])': FunctionFragment
        'burnPrint(uint256,uint256)': FunctionFragment
        'getBurnPrice(uint256)': FunctionFragment
        'getPrintPrice(uint256)': FunctionFragment
        'getPrintTokenIdFromSeed(uint256)': FunctionFragment
        'getScriptAtIndex(uint256)': FunctionFragment
        'isApprovedForAll(address,address)': FunctionFragment
        'mint()': FunctionFragment
        'mintPrice()': FunctionFragment
        'mintPrint(uint256)': FunctionFragment
        'name()': FunctionFragment
        'originalsMinted()': FunctionFragment
        'owner()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'reserve()': FunctionFragment
        'resetScriptCount()': FunctionFragment
        'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment
        'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment
        'scriptCount()': FunctionFragment
        'seedToOwner(uint256)': FunctionFragment
        'seedToPrintsSupply(uint256)': FunctionFragment
        'setApprovalForAll(address,bool)': FunctionFragment
        'setEnabled(bool)': FunctionFragment
        'setLocked(bool)': FunctionFragment
        'setPrice(uint256)': FunctionFragment
        'setURI(string)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'symbol()': FunctionFragment
        'totalSupply(uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'updateScript(string,uint256)': FunctionFragment
        'uri(uint256)': FunctionFragment
        'withdraw()': FunctionFragment
    }

    encodeFunctionData(functionFragment: 'addScript', values: [string]): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [string, BigNumberish]): string
    encodeFunctionData(
        functionFragment: 'balanceOfBatch',
        values: [string[], BigNumberish[]]
    ): string
    encodeFunctionData(functionFragment: 'burnPrint', values: [BigNumberish, BigNumberish]): string
    encodeFunctionData(functionFragment: 'getBurnPrice', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'getPrintPrice', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'getPrintTokenIdFromSeed', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'getScriptAtIndex', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string
    encodeFunctionData(functionFragment: 'mint', values?: undefined): string
    encodeFunctionData(functionFragment: 'mintPrice', values?: undefined): string
    encodeFunctionData(functionFragment: 'mintPrint', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'name', values?: undefined): string
    encodeFunctionData(functionFragment: 'originalsMinted', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'reserve', values?: undefined): string
    encodeFunctionData(functionFragment: 'resetScriptCount', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'safeBatchTransferFrom',
        values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'safeTransferFrom',
        values: [string, string, BigNumberish, BigNumberish, BytesLike]
    ): string
    encodeFunctionData(functionFragment: 'scriptCount', values?: undefined): string
    encodeFunctionData(functionFragment: 'seedToOwner', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'seedToPrintsSupply', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string
    encodeFunctionData(functionFragment: 'setEnabled', values: [boolean]): string
    encodeFunctionData(functionFragment: 'setLocked', values: [boolean]): string
    encodeFunctionData(functionFragment: 'setPrice', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'setURI', values: [string]): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
    encodeFunctionData(functionFragment: 'updateScript', values: [string, BigNumberish]): string
    encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string
    encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

    decodeFunctionResult(functionFragment: 'addScript', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burnPrint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getBurnPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getPrintPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getPrintTokenIdFromSeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getScriptAtIndex', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mintPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mintPrint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'originalsMinted', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'reserve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'resetScriptCount', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'scriptCount', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'seedToOwner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'seedToPrintsSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setEnabled', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setLocked', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setURI', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateScript', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

    events: {
        'ApprovalForAll(address,address,bool)': EventFragment
        'MintOriginal(address,uint256,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PrintBurned(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment
        'PrintMinted(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)': EventFragment
        'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment
        'TransferSingle(address,address,address,uint256,uint256)': EventFragment
        'URI(string,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'MintOriginal'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PrintBurned'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PrintMinted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment
}

export class EulerBeatsAbi extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this

    listeners(eventName?: string): Array<Listener>
    off(eventName: string, listener: Listener): this
    on(eventName: string, listener: Listener): this
    once(eventName: string, listener: Listener): this
    removeListener(eventName: string, listener: Listener): this
    removeAllListeners(eventName?: string): this

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

    interface: EulerBeatsAbiInterface

    functions: {
        addScript(_script: string, overrides?: Overrides): Promise<ContractTransaction>

        'addScript(string)'(_script: string, overrides?: Overrides): Promise<ContractTransaction>

        balanceOf(
            account: string,
            id: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        'balanceOf(address,uint256)'(
            account: string,
            id: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        balanceOfBatch(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<[BigNumber[]]>

        'balanceOfBatch(address[],uint256[])'(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<[BigNumber[]]>

        burnPrint(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        'burnPrint(uint256,uint256)'(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        getBurnPrice(
            supply: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { price: BigNumber }>

        'getBurnPrice(uint256)'(
            supply: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { price: BigNumber }>

        getPrintPrice(
            printNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { price: BigNumber }>

        'getPrintPrice(uint256)'(
            printNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { price: BigNumber }>

        getPrintTokenIdFromSeed(seed: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        'getPrintTokenIdFromSeed(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        getScriptAtIndex(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>

        'getScriptAtIndex(uint256)'(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>

        isApprovedForAll(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        'isApprovedForAll(address,address)'(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        mint(overrides?: PayableOverrides): Promise<ContractTransaction>

        'mint()'(overrides?: PayableOverrides): Promise<ContractTransaction>

        mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>

        'mintPrice()'(overrides?: CallOverrides): Promise<[BigNumber]>

        mintPrint(seed: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>

        'mintPrint(uint256)'(
            seed: BigNumberish,
            overrides?: PayableOverrides
        ): Promise<ContractTransaction>

        name(overrides?: CallOverrides): Promise<[string]>

        'name()'(overrides?: CallOverrides): Promise<[string]>

        originalsMinted(overrides?: CallOverrides): Promise<[BigNumber]>

        'originalsMinted()'(overrides?: CallOverrides): Promise<[BigNumber]>

        owner(overrides?: CallOverrides): Promise<[string]>

        'owner()'(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

        'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

        reserve(overrides?: CallOverrides): Promise<[BigNumber]>

        'reserve()'(overrides?: CallOverrides): Promise<[BigNumber]>

        resetScriptCount(overrides?: Overrides): Promise<ContractTransaction>

        'resetScriptCount()'(overrides?: Overrides): Promise<ContractTransaction>

        safeBatchTransferFrom(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        safeTransferFrom(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        'safeTransferFrom(address,address,uint256,uint256,bytes)'(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        scriptCount(overrides?: CallOverrides): Promise<[BigNumber]>

        'scriptCount()'(overrides?: CallOverrides): Promise<[BigNumber]>

        seedToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

        'seedToOwner(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

        seedToPrintsSupply(seed: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        'seedToPrintsSupply(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        'setApprovalForAll(address,bool)'(
            operator: string,
            approved: boolean,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        setEnabled(enabled: boolean, overrides?: Overrides): Promise<ContractTransaction>

        'setEnabled(bool)'(enabled: boolean, overrides?: Overrides): Promise<ContractTransaction>

        setLocked(locked: boolean, overrides?: Overrides): Promise<ContractTransaction>

        'setLocked(bool)'(locked: boolean, overrides?: Overrides): Promise<ContractTransaction>

        setPrice(_mintPrice: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

        'setPrice(uint256)'(
            _mintPrice: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        setURI(newuri: string, overrides?: Overrides): Promise<ContractTransaction>

        'setURI(string)'(newuri: string, overrides?: Overrides): Promise<ContractTransaction>

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        symbol(overrides?: CallOverrides): Promise<[string]>

        'symbol()'(overrides?: CallOverrides): Promise<[string]>

        totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

        transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

        'transferOwnership(address)'(
            newOwner: string,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        updateScript(
            _script: string,
            index: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        'updateScript(string,uint256)'(
            _script: string,
            index: BigNumberish,
            overrides?: Overrides
        ): Promise<ContractTransaction>

        uri(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>

        'uri(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>

        withdraw(overrides?: Overrides): Promise<ContractTransaction>

        'withdraw()'(overrides?: Overrides): Promise<ContractTransaction>
    }

    addScript(_script: string, overrides?: Overrides): Promise<ContractTransaction>

    'addScript(string)'(_script: string, overrides?: Overrides): Promise<ContractTransaction>

    balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address,uint256)'(
        account: string,
        id: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    balanceOfBatch(
        accounts: string[],
        ids: BigNumberish[],
        overrides?: CallOverrides
    ): Promise<BigNumber[]>

    'balanceOfBatch(address[],uint256[])'(
        accounts: string[],
        ids: BigNumberish[],
        overrides?: CallOverrides
    ): Promise<BigNumber[]>

    burnPrint(
        seed: BigNumberish,
        minimumSupply: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    'burnPrint(uint256,uint256)'(
        seed: BigNumberish,
        minimumSupply: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    getBurnPrice(supply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getBurnPrice(uint256)'(supply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getPrintPrice(printNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getPrintPrice(uint256)'(
        printNumber: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getPrintTokenIdFromSeed(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getPrintTokenIdFromSeed(uint256)'(
        seed: BigNumberish,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getScriptAtIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>

    'getScriptAtIndex(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<string>

    isApprovedForAll(account: string, operator: string, overrides?: CallOverrides): Promise<boolean>

    'isApprovedForAll(address,address)'(
        account: string,
        operator: string,
        overrides?: CallOverrides
    ): Promise<boolean>

    mint(overrides?: PayableOverrides): Promise<ContractTransaction>

    'mint()'(overrides?: PayableOverrides): Promise<ContractTransaction>

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>

    'mintPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    mintPrint(seed: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>

    'mintPrint(uint256)'(
        seed: BigNumberish,
        overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    originalsMinted(overrides?: CallOverrides): Promise<BigNumber>

    'originalsMinted()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    reserve(overrides?: CallOverrides): Promise<BigNumber>

    'reserve()'(overrides?: CallOverrides): Promise<BigNumber>

    resetScriptCount(overrides?: Overrides): Promise<ContractTransaction>

    'resetScriptCount()'(overrides?: Overrides): Promise<ContractTransaction>

    safeBatchTransferFrom(
        from: string,
        to: string,
        ids: BigNumberish[],
        amounts: BigNumberish[],
        data: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
        from: string,
        to: string,
        ids: BigNumberish[],
        amounts: BigNumberish[],
        data: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    safeTransferFrom(
        from: string,
        to: string,
        id: BigNumberish,
        amount: BigNumberish,
        data: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,uint256,bytes)'(
        from: string,
        to: string,
        id: BigNumberish,
        amount: BigNumberish,
        data: BytesLike,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    scriptCount(overrides?: CallOverrides): Promise<BigNumber>

    'scriptCount()'(overrides?: CallOverrides): Promise<BigNumber>

    seedToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'seedToOwner(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    seedToPrintsSupply(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'seedToPrintsSupply(uint256)'(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    'setApprovalForAll(address,bool)'(
        operator: string,
        approved: boolean,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    setEnabled(enabled: boolean, overrides?: Overrides): Promise<ContractTransaction>

    'setEnabled(bool)'(enabled: boolean, overrides?: Overrides): Promise<ContractTransaction>

    setLocked(locked: boolean, overrides?: Overrides): Promise<ContractTransaction>

    'setLocked(bool)'(locked: boolean, overrides?: Overrides): Promise<ContractTransaction>

    setPrice(_mintPrice: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>

    'setPrice(uint256)'(
        _mintPrice: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    setURI(newuri: string, overrides?: Overrides): Promise<ContractTransaction>

    'setURI(string)'(newuri: string, overrides?: Overrides): Promise<ContractTransaction>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>

    'transferOwnership(address)'(
        newOwner: string,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    updateScript(
        _script: string,
        index: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    'updateScript(string,uint256)'(
        _script: string,
        index: BigNumberish,
        overrides?: Overrides
    ): Promise<ContractTransaction>

    uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>

    'uri(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<string>

    withdraw(overrides?: Overrides): Promise<ContractTransaction>

    'withdraw()'(overrides?: Overrides): Promise<ContractTransaction>

    callStatic: {
        addScript(_script: string, overrides?: CallOverrides): Promise<void>

        'addScript(string)'(_script: string, overrides?: CallOverrides): Promise<void>

        balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'balanceOf(address,uint256)'(
            account: string,
            id: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        balanceOfBatch(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        'balanceOfBatch(address[],uint256[])'(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        burnPrint(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'burnPrint(uint256,uint256)'(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        getBurnPrice(supply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'getBurnPrice(uint256)'(supply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        getPrintPrice(printNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'getPrintPrice(uint256)'(
            printNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getPrintTokenIdFromSeed(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'getPrintTokenIdFromSeed(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getScriptAtIndex(index: BigNumberish, overrides?: CallOverrides): Promise<string>

        'getScriptAtIndex(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<string>

        isApprovedForAll(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<boolean>

        'isApprovedForAll(address,address)'(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<boolean>

        mint(overrides?: CallOverrides): Promise<BigNumber>

        'mint()'(overrides?: CallOverrides): Promise<BigNumber>

        mintPrice(overrides?: CallOverrides): Promise<BigNumber>

        'mintPrice()'(overrides?: CallOverrides): Promise<BigNumber>

        mintPrint(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'mintPrint(uint256)'(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<string>

        'name()'(overrides?: CallOverrides): Promise<string>

        originalsMinted(overrides?: CallOverrides): Promise<BigNumber>

        'originalsMinted()'(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        'owner()'(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

        reserve(overrides?: CallOverrides): Promise<BigNumber>

        'reserve()'(overrides?: CallOverrides): Promise<BigNumber>

        resetScriptCount(overrides?: CallOverrides): Promise<void>

        'resetScriptCount()'(overrides?: CallOverrides): Promise<void>

        safeBatchTransferFrom(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        safeTransferFrom(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        'safeTransferFrom(address,address,uint256,uint256,bytes)'(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        scriptCount(overrides?: CallOverrides): Promise<BigNumber>

        'scriptCount()'(overrides?: CallOverrides): Promise<BigNumber>

        seedToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

        'seedToOwner(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

        seedToPrintsSupply(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'seedToPrintsSupply(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        'setApprovalForAll(address,bool)'(
            operator: string,
            approved: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        setEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>

        'setEnabled(bool)'(enabled: boolean, overrides?: CallOverrides): Promise<void>

        setLocked(locked: boolean, overrides?: CallOverrides): Promise<void>

        'setLocked(bool)'(locked: boolean, overrides?: CallOverrides): Promise<void>

        setPrice(_mintPrice: BigNumberish, overrides?: CallOverrides): Promise<void>

        'setPrice(uint256)'(_mintPrice: BigNumberish, overrides?: CallOverrides): Promise<void>

        setURI(newuri: string, overrides?: CallOverrides): Promise<void>

        'setURI(string)'(newuri: string, overrides?: CallOverrides): Promise<void>

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<boolean>

        symbol(overrides?: CallOverrides): Promise<string>

        'symbol()'(overrides?: CallOverrides): Promise<string>

        totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

        'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>

        updateScript(_script: string, index: BigNumberish, overrides?: CallOverrides): Promise<void>

        'updateScript(string,uint256)'(
            _script: string,
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        uri(_id: BigNumberish, overrides?: CallOverrides): Promise<string>

        'uri(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<string>

        withdraw(overrides?: CallOverrides): Promise<void>

        'withdraw()'(overrides?: CallOverrides): Promise<void>
    }

    filters: {
        ApprovalForAll(
            account: string | null,
            operator: string | null,
            approved: null
        ): TypedEventFilter<
            [string, string, boolean],
            { account: string; operator: string; approved: boolean }
        >

        MintOriginal(
            to: string | null,
            seed: null,
            originalsMinted: BigNumberish | null
        ): TypedEventFilter<
            [string, BigNumber, BigNumber],
            { to: string; seed: BigNumber; originalsMinted: BigNumber }
        >

        OwnershipTransferred(
            previousOwner: string | null,
            newOwner: string | null
        ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

        PrintBurned(
            to: string | null,
            id: null,
            seed: BigNumberish | null,
            priceReceived: null,
            nextPrintPrice: null,
            nextBurnPrice: null,
            printsSupply: null,
            reserve: null
        ): TypedEventFilter<
            [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
            {
                to: string
                id: BigNumber
                seed: BigNumber
                priceReceived: BigNumber
                nextPrintPrice: BigNumber
                nextBurnPrice: BigNumber
                printsSupply: BigNumber
                reserve: BigNumber
            }
        >

        PrintMinted(
            to: string | null,
            id: null,
            seed: BigNumberish | null,
            pricePaid: null,
            nextPrintPrice: null,
            nextBurnPrice: null,
            printsSupply: null,
            royaltyPaid: null,
            reserve: null,
            royaltyRecipient: string | null
        ): TypedEventFilter<
            [
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                string
            ],
            {
                to: string
                id: BigNumber
                seed: BigNumber
                pricePaid: BigNumber
                nextPrintPrice: BigNumber
                nextBurnPrice: BigNumber
                printsSupply: BigNumber
                royaltyPaid: BigNumber
                reserve: BigNumber
                royaltyRecipient: string
            }
        >

        TransferBatch(
            operator: string | null,
            from: string | null,
            to: string | null,
            ids: null,
            values: null
        ): TypedEventFilter<
            [string, string, string, BigNumber[], BigNumber[]],
            {
                operator: string
                from: string
                to: string
                ids: BigNumber[]
                values: BigNumber[]
            }
        >

        TransferSingle(
            operator: string | null,
            from: string | null,
            to: string | null,
            id: null,
            value: null
        ): TypedEventFilter<
            [string, string, string, BigNumber, BigNumber],
            {
                operator: string
                from: string
                to: string
                id: BigNumber
                value: BigNumber
            }
        >

        URI(
            value: null,
            id: BigNumberish | null
        ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>
    }

    estimateGas: {
        addScript(_script: string, overrides?: Overrides): Promise<BigNumber>

        'addScript(string)'(_script: string, overrides?: Overrides): Promise<BigNumber>

        balanceOf(account: string, id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'balanceOf(address,uint256)'(
            account: string,
            id: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        balanceOfBatch(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'balanceOfBatch(address[],uint256[])'(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        burnPrint(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>

        'burnPrint(uint256,uint256)'(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>

        getBurnPrice(supply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'getBurnPrice(uint256)'(supply: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        getPrintPrice(printNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'getPrintPrice(uint256)'(
            printNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getPrintTokenIdFromSeed(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'getPrintTokenIdFromSeed(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getScriptAtIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'getScriptAtIndex(uint256)'(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isApprovedForAll(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'isApprovedForAll(address,address)'(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        mint(overrides?: PayableOverrides): Promise<BigNumber>

        'mint()'(overrides?: PayableOverrides): Promise<BigNumber>

        mintPrice(overrides?: CallOverrides): Promise<BigNumber>

        'mintPrice()'(overrides?: CallOverrides): Promise<BigNumber>

        mintPrint(seed: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>

        'mintPrint(uint256)'(seed: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<BigNumber>

        'name()'(overrides?: CallOverrides): Promise<BigNumber>

        originalsMinted(overrides?: CallOverrides): Promise<BigNumber>

        'originalsMinted()'(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        'owner()'(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides): Promise<BigNumber>

        'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

        reserve(overrides?: CallOverrides): Promise<BigNumber>

        'reserve()'(overrides?: CallOverrides): Promise<BigNumber>

        resetScriptCount(overrides?: Overrides): Promise<BigNumber>

        'resetScriptCount()'(overrides?: Overrides): Promise<BigNumber>

        safeBatchTransferFrom(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: Overrides
        ): Promise<BigNumber>

        'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: Overrides
        ): Promise<BigNumber>

        safeTransferFrom(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides
        ): Promise<BigNumber>

        'safeTransferFrom(address,address,uint256,uint256,bytes)'(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides
        ): Promise<BigNumber>

        scriptCount(overrides?: CallOverrides): Promise<BigNumber>

        'scriptCount()'(overrides?: CallOverrides): Promise<BigNumber>

        seedToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'seedToOwner(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        seedToPrintsSupply(seed: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'seedToPrintsSupply(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides
        ): Promise<BigNumber>

        'setApprovalForAll(address,bool)'(
            operator: string,
            approved: boolean,
            overrides?: Overrides
        ): Promise<BigNumber>

        setEnabled(enabled: boolean, overrides?: Overrides): Promise<BigNumber>

        'setEnabled(bool)'(enabled: boolean, overrides?: Overrides): Promise<BigNumber>

        setLocked(locked: boolean, overrides?: Overrides): Promise<BigNumber>

        'setLocked(bool)'(locked: boolean, overrides?: Overrides): Promise<BigNumber>

        setPrice(_mintPrice: BigNumberish, overrides?: Overrides): Promise<BigNumber>

        'setPrice(uint256)'(_mintPrice: BigNumberish, overrides?: Overrides): Promise<BigNumber>

        setURI(newuri: string, overrides?: Overrides): Promise<BigNumber>

        'setURI(string)'(newuri: string, overrides?: Overrides): Promise<BigNumber>

        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<BigNumber>

        'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'totalSupply(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>

        'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>

        updateScript(
            _script: string,
            index: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>

        'updateScript(string,uint256)'(
            _script: string,
            index: BigNumberish,
            overrides?: Overrides
        ): Promise<BigNumber>

        uri(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        'uri(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

        withdraw(overrides?: Overrides): Promise<BigNumber>

        'withdraw()'(overrides?: Overrides): Promise<BigNumber>
    }

    populateTransaction: {
        addScript(_script: string, overrides?: Overrides): Promise<PopulatedTransaction>

        'addScript(string)'(_script: string, overrides?: Overrides): Promise<PopulatedTransaction>

        balanceOf(
            account: string,
            id: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'balanceOf(address,uint256)'(
            account: string,
            id: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        balanceOfBatch(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'balanceOfBatch(address[],uint256[])'(
            accounts: string[],
            ids: BigNumberish[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        burnPrint(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        'burnPrint(uint256,uint256)'(
            seed: BigNumberish,
            minimumSupply: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        getBurnPrice(supply: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        'getBurnPrice(uint256)'(
            supply: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getPrintPrice(
            printNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getPrintPrice(uint256)'(
            printNumber: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getPrintTokenIdFromSeed(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getPrintTokenIdFromSeed(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getScriptAtIndex(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getScriptAtIndex(uint256)'(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isApprovedForAll(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'isApprovedForAll(address,address)'(
            account: string,
            operator: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        mint(overrides?: PayableOverrides): Promise<PopulatedTransaction>

        'mint()'(overrides?: PayableOverrides): Promise<PopulatedTransaction>

        mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'mintPrice()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        mintPrint(seed: BigNumberish, overrides?: PayableOverrides): Promise<PopulatedTransaction>

        'mintPrint(uint256)'(
            seed: BigNumberish,
            overrides?: PayableOverrides
        ): Promise<PopulatedTransaction>

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        originalsMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'originalsMinted()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

        'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

        reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'reserve()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        resetScriptCount(overrides?: Overrides): Promise<PopulatedTransaction>

        'resetScriptCount()'(overrides?: Overrides): Promise<PopulatedTransaction>

        safeBatchTransferFrom(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)'(
            from: string,
            to: string,
            ids: BigNumberish[],
            amounts: BigNumberish[],
            data: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        safeTransferFrom(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        'safeTransferFrom(address,address,uint256,uint256,bytes)'(
            from: string,
            to: string,
            id: BigNumberish,
            amount: BigNumberish,
            data: BytesLike,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        scriptCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'scriptCount()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        seedToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        'seedToOwner(uint256)'(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        seedToPrintsSupply(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'seedToPrintsSupply(uint256)'(
            seed: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        setApprovalForAll(
            operator: string,
            approved: boolean,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        'setApprovalForAll(address,bool)'(
            operator: string,
            approved: boolean,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        setEnabled(enabled: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

        'setEnabled(bool)'(enabled: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

        setLocked(locked: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

        'setLocked(bool)'(locked: boolean, overrides?: Overrides): Promise<PopulatedTransaction>

        setPrice(_mintPrice: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>

        'setPrice(uint256)'(
            _mintPrice: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        setURI(newuri: string, overrides?: Overrides): Promise<PopulatedTransaction>

        'setURI(string)'(newuri: string, overrides?: Overrides): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        'totalSupply(uint256)'(
            arg0: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>

        'transferOwnership(address)'(
            newOwner: string,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        updateScript(
            _script: string,
            index: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        'updateScript(string,uint256)'(
            _script: string,
            index: BigNumberish,
            overrides?: Overrides
        ): Promise<PopulatedTransaction>

        uri(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        'uri(uint256)'(_id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdraw(overrides?: Overrides): Promise<PopulatedTransaction>

        'withdraw()'(overrides?: Overrides): Promise<PopulatedTransaction>
    }
}
